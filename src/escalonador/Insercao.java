/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package escalonador;

import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;



/**
 *
 * @author Rafael
 */
public class Insercao extends javax.swing.JFrame {//declaraçao de variaveis
    DefaultListModel model;
    DefaultTableModel modelp;
    ArrayList<Processo> processos = new ArrayList<Processo>();
    Escalonadores esc = new Escalonadores();
    String[] escalonadores = new String[6];
    ArrayList<Integer> indiceRR = new ArrayList<Integer>();

    /**
     * Creates new form Insercao
     */
    public Insercao(DefaultListModel modelo) {
        initComponents();
        model = modelo;//recebe modelo de lista do frame anterior
        escalonadores[0] = "FCFS";
        escalonadores[1] = "SJF";
        escalonadores[2] = "SRTF";
        escalonadores[3] = "ROUND ROBIN";
        escalonadores[4] = "PRIORIDADES S/ PREEMPÇÃO";
        escalonadores[5] = "PRIORIDADES C/ PREEMPÇÃO";//guarda o nome de todos escalonadores para comparaçao
        CaixaPriori.setVisible(false);//esconde todas caixas de escalonadores especificos
        LabelPriori.setVisible(false);
        CaixaQuantun.setVisible(false);
        LabelQuantun.setVisible(false);
        Botao_Quantun.setVisible(false);
        Insere_lista();//chama funçao
        String[] colunas = {"ID","TC","CPU","PRIORIDADE","ESCALONADOR"};//colunas de variaveis dos processos
        String[][] aux = {};//dados
        modelp = new DefaultTableModel(aux,colunas);//criaçao do modelo de tabela com as colunas definidas
        TabelaProcessos.setModel(modelp);
    }
    
    private void Insere_lista(){//funçao para inserçao de escalonadores na lista com seu indice de prioridade
        DefaultListModel modelo = new DefaultListModel();
        for(int i = 0;i < model.size();i++){
            modelo.add(i,i+"-"+(String) model.get(i));//adiciona escalonador na lista com seu respectivo indice de prioridade
        }
        ListaEsc.setModel(modelo);//insere todos escalonadores na lista
        String nome;
        int contador = 0;
        for(int i = 0; i < model.getSize();i++){
            nome = (String) model.getElementAt(i);
            if(nome.contains(escalonadores[3])){//verifica quantos Round Robin existe
                contador++;
                indiceRR.add(i);//guarda o indice de prioridade do escalonador RR para diferenciar suas filas circulares
            }
        }
        esc.quantun = new int[contador];
        esc.fila = new ArrayList[contador];
        for(int i = 0; i < contador;i++){
            esc.fila[i] = new ArrayList<Integer>();//adiciona filas conforme o numero de escalonadores RR existir
            esc.quantun[i] = -1;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ListaEsc = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        CaixaTC = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        CaixaCPU = new javax.swing.JTextField();
        CaixaPriori = new javax.swing.JTextField();
        LabelPriori = new javax.swing.JLabel();
        Botao_Inserir = new javax.swing.JButton();
        LabelQuantun = new javax.swing.JLabel();
        CaixaQuantun = new javax.swing.JTextField();
        Botao_Quantun = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        TabelaProcessos = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        tabela = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        Limpar = new javax.swing.JButton();
        Voltar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Escalonadores");

        ListaEsc.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ListaEscMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(ListaEsc);

        jLabel2.setText("Processo:");

        jLabel3.setText("Tempo de Chegada");

        jLabel4.setText("CPU Burst");

        LabelPriori.setText("Prioridade");

        Botao_Inserir.setText("Inserir");
        Botao_Inserir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Botao_InserirActionPerformed(evt);
            }
        });

        LabelQuantun.setText("Quantun");

        Botao_Quantun.setText("Definir");
        Botao_Quantun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Botao_QuantunActionPerformed(evt);
            }
        });

        TabelaProcessos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane3.setViewportView(TabelaProcessos);

        jButton1.setText("iniciar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        tabela.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tabela.setToolTipText("");
        tabela.setCellSelectionEnabled(true);
        jScrollPane4.setViewportView(tabela);
        tabela.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        jLabel5.setText("TE");
        jLabel5.setAlignmentY(0.6F);

        jLabel6.setText("Processos");

        Limpar.setText("Limpar Processos");
        Limpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LimparActionPerformed(evt);
            }
        });

        Voltar.setText("Voltar");
        Voltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VoltarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1012, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(CaixaQuantun)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(CaixaTC, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(CaixaCPU, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(LabelPriori)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(CaixaPriori, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(Botao_Inserir)))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Botao_Quantun)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(Limpar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Voltar))))
                    .addComponent(LabelQuantun)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(LabelPriori))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CaixaTC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CaixaCPU, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CaixaPriori, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Botao_Inserir))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LabelQuantun)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CaixaQuantun, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Botao_Quantun)
                    .addComponent(jButton1)
                    .addComponent(Limpar)
                    .addComponent(Voltar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6)
                        .addGap(0, 29, Short.MAX_VALUE))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Botao_InserirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Botao_InserirActionPerformed
        if(ListaEsc.getSelectedValue() != null){//verifica se algum escalonador esta selecionado
            Processo novo = null;//cria novo processo auxiliar
            for (int i = 0; i < 4;i++){
                if(ListaEsc.getSelectedValue().contains(escalonadores[i])){
                    novo = new Processo(processos.size(), Integer.parseInt(CaixaTC.getText()), Integer.parseInt(CaixaCPU.getText()), -1, ListaEsc.getSelectedIndex(),i);
                }//cria processo auxiliar dos escalonadores quem nao tem prioridade
            }
            if(ListaEsc.getSelectedValue().contains(escalonadores[4])){
                novo = new Processo(processos.size(), Integer.parseInt(CaixaTC.getText()), Integer.parseInt(CaixaCPU.getText()), Integer.parseInt(CaixaPriori.getText()), ListaEsc.getSelectedIndex(),4);
            }//cria processo auxiliar para prioridades sem preempçao
            if(ListaEsc.getSelectedValue().contains(escalonadores[5])){
                novo = new Processo(processos.size(), Integer.parseInt(CaixaTC.getText()), Integer.parseInt(CaixaCPU.getText()), Integer.parseInt(CaixaPriori.getText()), ListaEsc.getSelectedIndex(),5);
            }//cria processo auxiliar para prioridades com preempçao
            processos.add(novo);//adiciona processo auxiliar na arraylist de processos
            modelp.addRow(new String[]{Integer.toString(novo.ID),Integer.toString(novo.TC),Integer.toString(novo.CPU),Integer.toString(novo.Priori),Integer.toString(novo.Esc)});
            TabelaProcessos.setModel(modelp);//adiciona novo processo na lista de processos ja inserido
        }
    }//GEN-LAST:event_Botao_InserirActionPerformed

    private void ListaEscMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ListaEscMouseClicked
        CaixaPriori.setVisible(false);
        LabelPriori.setVisible(false);
        CaixaQuantun.setVisible(false);
        LabelQuantun.setVisible(false);
        Botao_Quantun.setVisible(false);
        if(ListaEsc.getSelectedValue().contains("ROUND ROBIN")){//se escalonador selecionado for RR mostra label, botao e caixa para o RR
            CaixaQuantun.setVisible(true);
            LabelQuantun.setVisible(true);
            Botao_Quantun.setVisible(true);
        }
        if(ListaEsc.getSelectedValue().contains("PRIORIDADES")){//se um dos dois prioridades for selecionado mostra, label e caixa adicional
            CaixaPriori.setVisible(true);
            LabelPriori.setVisible(true);
        }
    }//GEN-LAST:event_ListaEscMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        esc.TE = 0;//defini o tempo de execuçao inicial como 0
        if(esc.quantun != null){//verifica se em algum dos escalonadores RR nao tem quantun definido
            for(int i = 0; i < esc.quantun.length;i++){
                if(esc.quantun[i] < 1){
                    while(esc.quantun[i]< 1){//pede para inserir quantun do escalonador correspondente
                        esc.quantun[i] = Integer.parseInt(JOptionPane.showInputDialog("Insira um Quantun valido para o escalonador "+i));
                    }
                }
            }
        }
        int priori = -1;
        int proce = -1;
        while(!processos.isEmpty()){//enquanto houver processos ele fica em loop
            priori = -1;
            for(int i = 0; i < processos.size();i++){//busca por todos processos os que tiverem tempo de chegada menor ou igual o tempo de execuçao
                if(processos.get(i).TC <= esc.TE){//ao achar primeiro processo pronto para o uso da cpu guarda seu indice
                    if(priori == -1){
                        
                        proce = i;//guarda indice do primeiro processo achado
                        priori = processos.get(proce).Esc;
                    }
                    if(processos.get(i).Esc < processos.get(proce).Esc){//busca processos com maior prioridade do que o ja achado
                        
                        proce = i;//guarda indice do processo mais prioritario
                        priori = processos.get(proce).Esc;
                    }
                }
            }
            
            if(proce == -1){//caso nao achar um processo mais prioritario que o primeiro, entao primeiro processo ganha a cpu
                proce = 0;
            }
            if(processos.get(proce).Escalonador == 0){//busca qual escalonador correspondente do processo que ganhou a cpu
                processos = esc.escalonar_fcfs(processos,priori);
            }
            else if(processos.get(proce).Escalonador == 1){
                processos = esc.escalonar_sjf(processos,priori);
            }
            else if(processos.get(proce).Escalonador == 2){
                processos = esc.escalonar_srtf(processos,priori);
            }
            
            else if(processos.get(proce).Escalonador == 3){
                for(int i = 0; i < indiceRR.size(); i++){
                    if(processos.get(proce).Esc == indiceRR.get(i)){
                        processos = esc.escalonar_rr(processos,priori,i);//busca a fila circular corresponde do escalonador RR
                        i = indiceRR.size();
                    }
                }
            }
            else if(processos.get(proce).Escalonador == 4){
                processos = esc.escalonar_PsP(processos, priori);
            }
            
            else if(processos.get(proce).Escalonador == 5){
                processos = esc.escalonar_PcP(processos, priori);
            }
            
        }
        DefaultTableModel modelotabela = new DefaultTableModel();//cria novo modelo de tabela
        
        String[] inteiro = new String[esc.progresso.size()];
        for(int i = 0; i < esc.progresso.size();i++){//insere os processos para mostragem em tela grafica
            if(esc.progresso.get(i) < 0){
                inteiro[i] = "O";//se nao houve processo em determinado TE, adiciona O para mostrar que a cpu ficou ociosa naquele tempo
            }
            else{
                inteiro[i] = "P"+Integer.toString(esc.progresso.get(i));//insere o processo correspondente que ganhou a cpu em determinado TE
            }
        }
        
        for(int i = 0; i < esc.progresso.size();i++){
            modelotabela.addColumn(i);//adiciona cada TE dos processos por coluna
        }
        modelotabela.insertRow(0, inteiro);//insere todos processos em uma unica linha com varias colunas
        tabela.setModel(modelotabela);//insere modelo de tabela na tabela
        tabela.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);//metodo para inserir barra de rolagem
    }//GEN-LAST:event_jButton1ActionPerformed

    private void Botao_QuantunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Botao_QuantunActionPerformed
        if(Integer.parseInt(CaixaQuantun.getText()) > 0){
            for(int i = 0;i < ListaEsc.getSelectedIndex()+1;i++){
                if(indiceRR.get(i) == ListaEsc.getSelectedIndex()){//insere quantun correspondete do escalonador RR
                    esc.quantun[i] = Integer.parseInt(CaixaQuantun.getText()); 
                }
            }
        }
    }//GEN-LAST:event_Botao_QuantunActionPerformed

    private void LimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LimparActionPerformed
            processos = new ArrayList<Processo>();//limpa arraylist de processos
            String[] colunas = {"ID","TC","CPU","PRIORIDADE","ESCALONADOR"};
            String[][] aux = {};
            modelp = new DefaultTableModel(aux,colunas);//limpa tabela de processos
            TabelaProcessos.setModel(modelp);
            esc.progresso = new ArrayList<Integer>();//limpa processos para mostragem grafica
    }//GEN-LAST:event_LimparActionPerformed

    private void VoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VoltarActionPerformed
        Inicio novo = new Inicio();//inicia novo frame da tela anterior
        novo.setVisible(true);
        this.dispose();//apaga esse frame
    }//GEN-LAST:event_VoltarActionPerformed
    
    public static void main(String args[]) {
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Botao_Inserir;
    private javax.swing.JButton Botao_Quantun;
    private javax.swing.JTextField CaixaCPU;
    private javax.swing.JTextField CaixaPriori;
    private javax.swing.JTextField CaixaQuantun;
    private javax.swing.JTextField CaixaTC;
    private javax.swing.JLabel LabelPriori;
    private javax.swing.JLabel LabelQuantun;
    private javax.swing.JButton Limpar;
    private javax.swing.JList<String> ListaEsc;
    private javax.swing.JTable TabelaProcessos;
    private javax.swing.JButton Voltar;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable tabela;
    // End of variables declaration//GEN-END:variables
}
